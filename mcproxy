#!/usr/bin/python

import os
import sys
import argparse
import socket
import time
import logging
import yaml
from jsonpointer import resolve_pointer, set_pointer

import gevent
from gevent import select
from gevent import monkey; monkey.patch_all()

from protocol import Engine

LOG = logging.getLogger(__name__)

buffer_size = 8192
last_data = time.time()
cfg = {}

# This is the default server information returned to clients as
# part of the handshake process.  You can override this using
# jsonpointer expressions in the `server_info` key of the config 
# file or using the `--server-info` (`-S`) command line option.
server_info = {'players': {'max': 20, 'online': 0},
                           'version': {'protocol': 4,
                                       'name': 'Minecraft Server'},
                           'description': 'Minecraft proxy'}

class Timeout(Exception):
    pass

def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument('--wait-timeout', '-w',
                   type=int,
                   help=('Time to wait for remote to '
                         'become active before exiting '
                         'with an error.'))
    p.add_argument('--connect-timeout', '-c',
                   type=int,
                   default=10,
                   help=('Time to wait for a single '
                         'connection to remote.'))
    p.add_argument('--idle-timeout', '-t',
                   type=int,
                   help=('If there is no activity after '
                         'this many seconds the proxy '
                         'will exit.'))
    p.add_argument('--debug', '-d',
                   action='store_const',
                   const=logging.DEBUG,
                   dest='loglevel',
                   help='Log at DEBUG level')
    p.add_argument('--verbose', '-v',
                   action='store_const',
                   const=logging.INFO,
                   dest='loglevel',
                   help='Log at INFO level')
    p.add_argument('--config', '-f',
                   help='Path to configuration file')
    p.add_argument('--server-info', '-S', action='append',
                   default=[],
                   help='Set server info keys')
    p.add_argument('--protocol-version', '-V',
                   help='Set protocol version reported in server info')
    p.add_argument('remotehost',
                   help='Name or address of remote host')
    p.add_argument('remoteport',
                   type=int,
                   help='Remote port')
    p.set_defaults(loglevel=logging.WARN)
    return p.parse_args()

def connect_to_server():
    start_wait = time.time()

    while True:
        now = time.time()
        wait_time = now - start_wait

        try:
            s = socket.create_connection(
                (args.remotehost, args.remoteport),
                timeout=args.connect_timeout)
            LOG.info('remote is active after %d seconds', wait_time)
            return s
        except (socket.error, socket.timeout) as detail:
            LOG.debug('waiting %d seconds for remote to become active',
                         wait_time)
            if args.wait_timeout and wait_time > args.wait_timeout:
                raise Timeout()

            if isinstance(detail, socket.error):
                time.sleep(1)

def proxy_data(clisock, cliaddr, connector):
    global last_data

    from_client = ''
    from_remote = ''

    rfds = set([clisock])
    wfds = set()

    pe = Engine(server_info)

    LOG.info('starting handshake for %s', cliaddr)

    # Handle handshake
    while True:
        if from_remote:
            wfds.add(clisock)

        ready_read, ready_write, _ = select.select(
            list(rfds),
            list(wfds),
            []
            )

        if clisock in ready_write:
            nb = clisock.send(from_remote)
            last_data = time.time()
            LOG.debug('wrote %d bytes to client: %s' % (
                nb, repr(from_remote[:nb])))
            from_remote = from_remote[nb:]
            if not from_remote:
                wfds.remove(clisock)

        if clisock in ready_read:
            from_client = clisock.recv(buffer_size)
            LOG.debug('read %d bytes from client: %s' % (
                len(from_client), repr(from_client)))
            if not from_client:
                # client closed connection
                return

            for response in pe.send(from_client):
                from_remote += response

        if pe.complete and not from_remote:
            rfds.remove(clisock)
            from_client = pe.buffer
            break

    rfds = set([clisock])
    wfds = set()

    LOG.info('starting main proxy loop for %s', cliaddr)
    LOG.debug('initial client buffer is: %s', repr(from_client))

    while True:
        remsock = connector.value
        if remsock:
            rfds.add(remsock)

        if from_remote:
            wfds.add(clisock)
        if from_client and remsock:
            wfds.add(remsock)

        ready_read, ready_write, _ = select.select(
            list(rfds),
            list(wfds),
            [],
            0 if (from_remote or from_client) else None,
            )

        if clisock in ready_write:
            nb = clisock.send(from_remote)
            LOG.debug('wrote %d bytes to client', nb)
            from_remote = from_remote[nb:]
            last_data = time.time()

        if remsock in ready_write:
            nb = remsock.send(from_client)
            LOG.debug('wrote %d bytes to remote', nb)
            from_client = from_client[nb:]
            last_data = time.time()

        if clisock in ready_read:
            data = clisock.recv(buffer_size)
            LOG.debug('read %d bytes from client', len(data))
            if not data:
                return
            from_client += data
            last_data = time.time()

        if remsock in ready_read:
            data = remsock.recv(buffer_size)
            LOG.debug('read %d bytes from remote', len(data))
            if not data:
                return
            from_remote += data
            last_data = time.time()

def channel(clisock, cliaddr):
    '''Handles a single connection between a client and the remote server
    for which we are acting as a proxy.'''

    try:
        LOG.debug('starting channel for client %s', cliaddr)

        # Start connecting to remote in another greenlet
        connector = gevent.spawn(connect_to_server)
        proxy_data(clisock, cliaddr, connector)
    except Timeout:
        LOG.debug('timed out waiting for remote to become active')
    finally:
        LOG.info('closing channel for client %s', cliaddr)
        clisock.close()
        if connector.value:
            connector.value.close()

def main():
    global args
    global cfg

    args = parse_args()
    logging.basicConfig(
        level = args.loglevel)

    if args.config:
        with open(args.config) as fd:
            cfg = yaml.load(fd).get('minecraft', {})

    for k,v in cfg.get('server_info', {}).items():
        set_pointer(server_info, k, v)

    for k in args.server_info:
        k,v = k.split('=')
        set_pointer(server_info, k, v)

    if args.protocol_version:
        set_pointer(server_info, '/version/protocol',
                    int(args.protocol_version))

    LOG.info('server info: %s', server_info)

    listenfds = int(os.environ.get('LISTEN_FDS', 0))
    assert(listenfds == 1)

    listener = socket.fromfd(3, socket.AF_INET, socket.SOCK_STREAM)

    LOG.info('starting main loop')
    while True:
        rfds, wfds, xfds = select.select([listener], [], [], 10)
        if listener in rfds:
            clisock, cliaddr = listener.accept()
            LOG.info('new connection from %s', cliaddr)
            gevent.spawn(channel, clisock, cliaddr)

        if not rfds:
            now = time.time()
            idletime = now-last_data
            LOG.debug('idle check (%d)', idletime)
            if args.idle_timeout and (idletime > args.idle_timeout):
                LOG.info('idle time exceeded')
                break

if __name__ == '__main__':
    main()

